%САМОЕ ОСНОВНОЕ

clc                   % чистит командное окно
clear all             % чистит все




% ПЕРЕМЕННЫЕ
a = single(1);                 % single
b = 2.5;                       % double
c = 'char';                    % char
e = [1 2 3; 4 5 6];            % matrix 2x3   !!только числа              
% для матрицы через запятую(или пробел) разделяются элементы строки, а
% через точку с запятой - элементы столбца(сами строки)
% [1 2 3 4 5 6] и [1;2;3;4;5;6]
%    матрицы можно задавать шагом:
     [0:2:10]      % = [0 2 4 6 8 10]
%    '...' используется для перехода на след строку:
     [1  2  3  4  5;...
      6  7  8  9  10;...
      11 12 13 14 15;]
%    матрицы можно задавать блочно из других матриц:
     t = [t1 t2;...
          t3 t4;];       % важно сохранять размерности 
%    матрицы можно задавать через спец.функции
     t = ones(M,N)  % -- размера MxN из единиц; для квадратной достаточно
%    одного аргумента(и в остальных функциях)
     t = zeros(M,N) % -- аналогично из нулей
     t = eye(M,N)   % -- единичная матрица (нулевая с единичной диагональю)
     t = diag(t1)   % -- нулевая матрица с диагональю из вектора t1
%    НО если t1 - матрица, то в t будет возвращена диагональ t1
     t = magic(N)   % -- для N > 3 формирует специальную квадратную
%    матрицу порядка N, элементами которой являются целые числа от 1 до 
%    N^2, суммы элементов которой по строкам и столбцам равны. По 
%    диагоналям тоже
%     C rand(M,N,..) надо быть осторожнее, это функция создает матрицу из
%    рандомных элементов ТОЛЬКО от 0 до 1 размерности MxNx..
     t = randi([A B],M,N) % -- создает матрицу из рандомных элементов от A
%    до B размерности MxN
 
f = cell(2,3);                 %cellArray - массив ячеек пустой  !!любые 
%                              переменные
g = {1 2 'xx'; 'qw' 5 '9'};    % cellArray со значениями, размера 2х3
g{1,2};             % = 2      % доступ к значению
g(2,1);             % = 'qw'   % доступ к ячейке
e(2,2);             % = 5      % доступ к элементу матрицы




% ОПЕРАТОРЫ 
+ - * / \ ^   % --  понятно
.* ./ .\ .^  % --  действие для каждого элемента отдельно, а не для всей
% матрицы
% Выражение A./B приводит к матрице с элементами a(k,m)/b(k,m), 
% а выражение A.\ B приводит к матрице с элементами b(k,m)/a(k,m).      
b=a(:);                        % вытягивание матрицы в СТОЛБЕЦ 
a';           % транспонирование матрицы

disp(a);            % = 1      % вывести в консоль значение a
a = input('text');             % выводит в консоль text и ждет ввода 
% значения для переменной a

% Работа с матрицами

size(e);            % = [2 3]  % возвращает высоту и длину массива
length(e);          % = 3      % возвращает max(размеров)

% t1 - матрица 
t = nnz(t1)        % -- возвращает кол-во ненулевых элементов
t = ndim(t1)       % -- возвращает кол-во размерностей
t = numel(t1)      % -- возвращает кол-во элементов      

% Функции для проверки типа объекта (1/0)
% a - переменная
ismatrix(a)
isvector(a)
iscolumn(a)        % столбец?
isrow(a)           % строка?
isscalar(a)
isempty(a)

% Функции преобразования
% t1 - матрица
t = rot90(t1,N)       % -- вращение матрицы t1 на 90 градусов против
% часовой, если N > 0, по часовой, если N < 0
t = fliplr(t1)        % -- переставляет столбцы матрицы симметрично 
% относительно вертикальной оси(если четное) или относительно центрального
% столбца, который остается на месте(если нечетное)
t = flipud(t1)        % -- аналог fliplr для строк
t = sort(t1)          % -- сортировка по возрастанию и по СТОЛБЦАМ
t = sortrows(t1)      % -- сортировка по возрастанию и по СТРОКАМ
sort(t1,'ascend')     % -- по возрастанию
sort(t1,'descend')    % -- по убыванию
t = reshape(t1,M,N)   % -- возвращает матрицу из элементов t1 размера MxN

% Математические функции
% t1 - матрица 
t = det(t1)           % -- определитель матрицы t1
t = eig(t1)           % -- собственные числа матрицы t1
t = inv(t1)           % -- обратная матрица для t1
t = sum(t1)           % -- сумма элементов по СТОЛБЦАМ
t = prod(t1)          % -- произведение элементов по СТОЛБЦАМ
max(t1);min(t1)       % -- макс или мин элементы по СТОЛБЦАМ
t = mean(t1)          % -- среднее значение элементов



%ФУНКЦИИ 
% вместо <NAME> надо писать имя функции без скобочек и кавычек
function [argOUT] = <NAME>(argIN)
%     [возвращает]      (принимает)
%     принимать и возвращать ф-ция может и больше одного элемента
% в теле функции ОБЯЗАТЕЛЬНЫ точки с запятой!!!
end

% ПРИМЕР вызова
[a1] = <NAME>(b1);
[a1,a2] = <NAME>(b1,b2,b3);
% кол-во принимаемых и возвращаемых значений должно быть указано

% если их кол-во неизвестно, используется следующая запись:
function[varargout] = <NAME>(varargin)
%    varargout -- неизвестное количество возвращаемых элементов; это массив
%    ячеек; можно запрашивать [a_1,...,a_n] = <NAME>()
%    nargout = кол-во возвращаемых элементов
%    varargin  -- неизвестное кол-во принимаемых аргументов; тоже массив
%    ячеек; можно запрашивать <NAME>(a_1,...,a_n)
%    nargin  = кол-во принимаемых аргументов
%  для varargin и varargout обращение к конкретному элементу происходит
%  через varargin{1} или varargout{3}
end



if условие                        % без каких-либо скобочек 
    тело
else
    тело 
end


switch переменная                 % аналогично без кавычек и скобочек
    case значение 
        действие
    case {значение1, значение2}
        действие
    otherwise 
        действие
end 


for переменная = от : шаг : до    % тут тоже
    тело
end


while условие                     % уже понятно
    тело
end



% ПОЛИНОМЫ
y = polyval(p, s)      % p = [p1 p2 ... pn p(n+1)] - вектор коэффициентов 
% полинома p(x) = p1*x^n + p2*x^(n-1) + ... + pn*x + p(n+1), вычисляет 
% значение этого полинома в точке x = s.
% Если S - матрица, то матрица polyval(p, S) - это массив 
% значений полинома p(X) для каждого элемента матрицы S.
c = conv(a,b)          % умножение полиномов, где a - вектор коэффициентов 
% первого полинома, а b - второго; возвращает коэффициенты нового полинома
[q, r] = deconv(c, a)  % деление полинома с на полином a так, что q - 
% частное, а к - остаток от деления (выполняется c = conv(q, a) + r)
dp = polyder(p)        % возвращает коэффициенты производной полинома p(x)
dp = polyder(a, b)     % возвращает производную от произведения 
% полиномов a(x) * b(x) 
[q, p] = polyder(b, a) % возвращает производную от отношения полиномов 
% b(x)/a(x) в виде отношения полиномов q(x)/p(x)
r = roots(p)           % возвращает вектор-столбец корней полинома p(x)
p = poly(A)            % A - матрица порядка n, вычисляет вектор-строку
% коэффициентов характеристического полинома p(s) = det(sI - A) =
% = p1*s^n + p2*s^(n-1) + ... + pn*s + p(n+1)
p = poly(r)            % r - вектор-столбец корней некоторого полинома,
% вычисляет вектор-строку коэффициентов этого полинома



% ГРАФИКА
plot(x,y)              % строит график функции y(x)
% где x - вектор значений аргумента, y - вектор значений функции
hold on                % запись графиков поверх ВКЛ
grid on                % ВКЛ сетку
close all              % закрывает все графические окна
cla                    % стирает все графики в окне
title('Name')          % название
xlabel('NameX')        % название для оси X
ylabel('NameY')        % название для оси Y
xlim([min max])        % будет показана ось X от min до max 
ylim([min max])        % аналогично xlim для оси Y
subplot(M,N,K)         % создается MxN графиков в окне, и переходит в K-ый
text(x,y,'TEXT')       % в точке (x,y) выводится TEXT

% Пример для синуса
x = 0 : 0.001: 4*pi;
y = sin(x);
plot(x,y);                  

% Изменение вида графика
plot(x,y,'...')        % вместо ... писать в любом порядке:

% Тип линии
% :
% -
% --
% -.

% Цвет линии
% r - Red
% g - Green
% b - Blue
% c - Cyan
% m - Magenta
% y - Yellow
% k - blacK 
% w - White

% Тип маркера точки
% . - точка
% o - круг
% x - крест
% + - плюс
% * - звездочка
% s - квадрат
% в 
% ^ - треугольник
% > - повернутый треугольник
% < - симметричный треугольник
% v - перевернутый треугольник
% p - пятиконечная звезда
% h - шестиконечная звезда

% В график p пишем имя свойства и его значение через запятую
p = plot(x,y,'имя свойства1', значение1, и тд);
% LineWidth, Color, MarkerSize, MarkerFaceColor
% 5          [1 0 0.7]    15    'r'... / [1 0 0.4]    
% это же можно делать для уже созданного графика с помощью set()
set(p,'имя свойства1', значение1, и тд);
% get() позволяет получить значение свойства указанного графика
get(p,'имя свойства');

pause(T)         % ждет T секунд

'ButtonDownFcn',@<NAME>       % -- свойство, отвечающее за кликание по
% графику мышкой и последующего вызывание функции <NAME>